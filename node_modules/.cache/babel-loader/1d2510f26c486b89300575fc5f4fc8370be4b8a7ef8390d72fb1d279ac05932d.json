{"ast":null,"code":"var _jsxFileName = \"/Users/gy/Desktop/WorldHappinessLevel/src/components/WorldMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport stringSimilarity from \"string-similarity\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorldMap = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    const width = 800;\n    const height = 500;\n\n    // Set up projection and path\n    const projection = d3.geoMercator().scale(120).translate([width / 2, height / 1.5]);\n    const path = d3.geoPath(projection);\n\n    // Load world map TopoJSON\n    d3.json(\"/countries-110m.json\").then(worldData => {\n      const countries = topojson.feature(worldData, worldData.objects.countries).features;\n\n      // Create a color scale based on Ladder score\n      const colorScale = d3.scaleSequential(d3.interpolateYlGnBu).domain(d3.extent(data, d => d[\"Ladder score\"]));\n\n      // Prepare valid country names from the CSV\n      const validCountryNames = data.map(d => d.Country).filter(name => name && typeof name === \"string\");\n\n      // Draw countries on the map\n      svg.selectAll(\".country\").data(countries).join(\"path\").attr(\"class\", \"country\").attr(\"d\", path).attr(\"fill\", d => {\n        const topoCountryName = d.properties.name;\n\n        // Fallback for invalid or missing TopoJSON country names\n        if (!topoCountryName || typeof topoCountryName !== \"string\") {\n          console.warn(`Invalid TopoJSON country name: ${topoCountryName}`);\n          return \"#ccc\";\n        }\n\n        // Use fuzzy matching to find the best match\n        const bestMatch = stringSimilarity.findBestMatch(topoCountryName, validCountryNames);\n        const matchedCountry = bestMatch.bestMatch.rating > 0.8 ? bestMatch.bestMatch.target : null;\n        if (!matchedCountry) {\n          console.warn(`No match found for: ${topoCountryName}`);\n          return \"#ccc\"; // Default color for unmatched countries\n        }\n\n        // Get the Ladder score for the matched country\n        const countryData = data.find(c => c.Country === matchedCountry);\n        return countryData ? colorScale(countryData[\"Ladder score\"]) : \"#ccc\";\n      }).attr(\"stroke\", \"#fff\");\n\n      // Add a tooltip\n      const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\n      svg.selectAll(\".country\").on(\"mouseover\", (event, d) => {\n        const topoCountryName = d.properties.name;\n        if (!topoCountryName || typeof topoCountryName !== \"string\") {\n          tooltip.transition().duration(200).style(\"opacity\", 0.9);\n          tooltip.html(`<strong>Unknown Country</strong><br>No data`).style(\"left\", `${event.pageX + 10}px`).style(\"top\", `${event.pageY - 28}px`);\n          return;\n        }\n\n        // Use fuzzy matching to find the best match\n        const bestMatch = stringSimilarity.findBestMatch(topoCountryName, validCountryNames);\n        const matchedCountry = bestMatch.bestMatch.rating > 0.8 ? bestMatch.bestMatch.target : null;\n        const countryData = matchedCountry ? data.find(c => c.Country === matchedCountry) : null;\n        tooltip.transition().duration(200).style(\"opacity\", 0.9);\n        tooltip.html(countryData ? `<strong>${countryData.Country}</strong><br>Ladder score: ${countryData[\"Ladder score\"]}` : `<strong>${topoCountryName}</strong><br>No data`).style(\"left\", `${event.pageX + 10}px`).style(\"top\", `${event.pageY - 28}px`);\n      }).on(\"mouseout\", () => {\n        tooltip.transition().duration(500).style(\"opacity\", 0);\n      });\n    });\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: 800,\n      height: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(WorldMap, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useEffect","useRef","d3","topojson","stringSimilarity","jsxDEV","_jsxDEV","WorldMap","data","_s","svgRef","svg","select","current","width","height","projection","geoMercator","scale","translate","path","geoPath","json","then","worldData","countries","feature","objects","features","colorScale","scaleSequential","interpolateYlGnBu","domain","extent","d","validCountryNames","map","Country","filter","name","selectAll","join","attr","topoCountryName","properties","console","warn","bestMatch","findBestMatch","matchedCountry","rating","target","countryData","find","c","tooltip","append","style","on","event","transition","duration","html","pageX","pageY","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gy/Desktop/WorldHappinessLevel/src/components/WorldMap.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport stringSimilarity from \"string-similarity\";\n\nconst WorldMap = ({ data }) => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    const width = 800;\n    const height = 500;\n\n    // Set up projection and path\n    const projection = d3.geoMercator().scale(120).translate([width / 2, height / 1.5]);\n    const path = d3.geoPath(projection);\n\n    // Load world map TopoJSON\n    d3.json(\"/countries-110m.json\").then((worldData) => {\n      const countries = topojson.feature(worldData, worldData.objects.countries).features;\n\n      // Create a color scale based on Ladder score\n      const colorScale = d3\n        .scaleSequential(d3.interpolateYlGnBu)\n        .domain(d3.extent(data, (d) => d[\"Ladder score\"]));\n\n      // Prepare valid country names from the CSV\n      const validCountryNames = data\n        .map((d) => d.Country)\n        .filter((name) => name && typeof name === \"string\");\n\n      // Draw countries on the map\n      svg.selectAll(\".country\")\n        .data(countries)\n        .join(\"path\")\n        .attr(\"class\", \"country\")\n        .attr(\"d\", path)\n        .attr(\"fill\", (d) => {\n          const topoCountryName = d.properties.name;\n\n          // Fallback for invalid or missing TopoJSON country names\n          if (!topoCountryName || typeof topoCountryName !== \"string\") {\n            console.warn(`Invalid TopoJSON country name: ${topoCountryName}`);\n            return \"#ccc\";\n          }\n\n          // Use fuzzy matching to find the best match\n          const bestMatch = stringSimilarity.findBestMatch(topoCountryName, validCountryNames);\n          const matchedCountry =\n            bestMatch.bestMatch.rating > 0.8 ? bestMatch.bestMatch.target : null;\n\n          if (!matchedCountry) {\n            console.warn(`No match found for: ${topoCountryName}`);\n            return \"#ccc\"; // Default color for unmatched countries\n          }\n\n          // Get the Ladder score for the matched country\n          const countryData = data.find((c) => c.Country === matchedCountry);\n          return countryData ? colorScale(countryData[\"Ladder score\"]) : \"#ccc\";\n        })\n        .attr(\"stroke\", \"#fff\");\n\n      // Add a tooltip\n      const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\n\n      svg.selectAll(\".country\")\n        .on(\"mouseover\", (event, d) => {\n          const topoCountryName = d.properties.name;\n\n          if (!topoCountryName || typeof topoCountryName !== \"string\") {\n            tooltip.transition().duration(200).style(\"opacity\", 0.9);\n            tooltip\n              .html(`<strong>Unknown Country</strong><br>No data`)\n              .style(\"left\", `${event.pageX + 10}px`)\n              .style(\"top\", `${event.pageY - 28}px`);\n            return;\n          }\n\n          // Use fuzzy matching to find the best match\n          const bestMatch = stringSimilarity.findBestMatch(topoCountryName, validCountryNames);\n          const matchedCountry =\n            bestMatch.bestMatch.rating > 0.8 ? bestMatch.bestMatch.target : null;\n\n          const countryData = matchedCountry\n            ? data.find((c) => c.Country === matchedCountry)\n            : null;\n\n          tooltip.transition().duration(200).style(\"opacity\", 0.9);\n          tooltip\n            .html(\n              countryData\n                ? `<strong>${countryData.Country}</strong><br>Ladder score: ${countryData[\"Ladder score\"]}`\n                : `<strong>${topoCountryName}</strong><br>No data`\n            )\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY - 28}px`);\n        })\n        .on(\"mouseout\", () => {\n          tooltip.transition().duration(500).style(\"opacity\", 0);\n        });\n    });\n  }, [data]);\n\n  return (\n    <div>\n      <svg ref={svgRef} width={800} height={500}></svg>\n    </div>\n  );\n};\n\nexport default WorldMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}