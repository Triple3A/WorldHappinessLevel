{"ast":null,"code":"var _jsxFileName = \"/Users/gy/Desktop/WorldHappinessLevel/src/components/WorldMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorldMap = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    const width = 800;\n    const height = 500;\n\n    // Projection and path setup\n    const projection = d3.geoMercator().scale(100).translate([width / 2, height / 1.5]);\n    const path = d3.geoPath(projection);\n\n    // Load topojson and map data\n    d3.json(\"/countries-110m.json\").then(worldData => {\n      const countries = topojson.feature(worldData, worldData.objects.countries).features;\n\n      // Scale for happiness levels\n      const colorScale = d3.scaleSequential(d3.interpolateYlGnBu).domain(d3.extent(data, d => d.HappinessLevel));\n\n      // Draw the map\n      svg.selectAll(\".country\").data(countries).join(\"path\").attr(\"class\", \"country\").attr(\"d\", path).attr(\"fill\", d => {\n        const countryData = data.find(c => c.Country === d.properties.name);\n        return countryData ? colorScale(countryData.HappinessLevel) : \"#ccc\";\n      }).attr(\"stroke\", \"#333\");\n\n      // Add legend\n      //   const legend = svg.append(\"g\").attr(\"transform\", `translate(20, 20)`);\n      //   const legendScale = d3.scaleLinear()\n      //     .domain(d3.extent(data, (d) => d.HappinessLevel))\n      //     .range([0, 300]);\n      //   const legendAxis = d3.axisBottom(legendScale).ticks(6);\n\n      //   legend.selectAll(\"rect\")\n      //     .data(d3.range(0, 1.01, 0.01))\n      //     .join(\"rect\")\n      //     .attr(\"x\", (d) => legendScale(d3.interpolate(d3.extent(data, d => d.HappinessLevel)[0], d)))\n      //     .attr(\"width\", 10)\n      //     .attr(\"height\", 20)\n      //     .attr(\"fill\", d => colorScale(d))\n\n      //   legend.append(\"g\").call(legendAxis);\n    });\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    width: 800,\n    height: 500\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 10\n  }, this);\n};\n_s(WorldMap, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useEffect","useRef","d3","topojson","jsxDEV","_jsxDEV","WorldMap","data","_s","svgRef","svg","select","current","width","height","projection","geoMercator","scale","translate","path","geoPath","json","then","worldData","countries","feature","objects","features","colorScale","scaleSequential","interpolateYlGnBu","domain","extent","d","HappinessLevel","selectAll","join","attr","countryData","find","c","Country","properties","name","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gy/Desktop/WorldHappinessLevel/src/components/WorldMap.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\n\nconst WorldMap = ({ data }) => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    const width = 800;\n    const height = 500;\n\n    // Projection and path setup\n    const projection = d3.geoMercator().scale(100).translate([width / 2, height / 1.5]);\n    const path = d3.geoPath(projection);\n\n    // Load topojson and map data\n    d3.json(\"/countries-110m.json\").then((worldData) => {\n      const countries = topojson.feature(worldData, worldData.objects.countries).features;\n\n      // Scale for happiness levels\n      const colorScale = d3\n        .scaleSequential(d3.interpolateYlGnBu)\n        .domain(d3.extent(data, (d) => d.HappinessLevel));\n\n      // Draw the map\n      svg.selectAll(\".country\")\n        .data(countries)\n        .join(\"path\")\n        .attr(\"class\", \"country\")\n        .attr(\"d\", path)\n        .attr(\"fill\", (d) => {\n          const countryData = data.find((c) => c.Country === d.properties.name);\n          return countryData ? colorScale(countryData.HappinessLevel) : \"#ccc\";\n        })\n        .attr(\"stroke\", \"#333\");\n\n      // Add legend\n    //   const legend = svg.append(\"g\").attr(\"transform\", `translate(20, 20)`);\n    //   const legendScale = d3.scaleLinear()\n    //     .domain(d3.extent(data, (d) => d.HappinessLevel))\n    //     .range([0, 300]);\n    //   const legendAxis = d3.axisBottom(legendScale).ticks(6);\n\n    //   legend.selectAll(\"rect\")\n    //     .data(d3.range(0, 1.01, 0.01))\n    //     .join(\"rect\")\n    //     .attr(\"x\", (d) => legendScale(d3.interpolate(d3.extent(data, d => d.HappinessLevel)[0], d)))\n    //     .attr(\"width\", 10)\n    //     .attr(\"height\", 20)\n    //     .attr(\"fill\", d => colorScale(d))\n\n    //   legend.append(\"g\").call(legendAxis);\n    });\n  }, [data]);\n\n  return <svg ref={svgRef} width={800} height={500}></svg>;\n};\n\nexport default WorldMap;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,OAAO,KAAKC,QAAQ,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAMC,MAAM,GAAGR,MAAM,CAAC,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd,MAAMU,GAAG,GAAGR,EAAE,CAACS,MAAM,CAACF,MAAM,CAACG,OAAO,CAAC;IACrC,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;;IAElB;IACA,MAAMC,UAAU,GAAGb,EAAE,CAACc,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,SAAS,CAAC,CAACL,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,GAAG,CAAC,CAAC;IACnF,MAAMK,IAAI,GAAGjB,EAAE,CAACkB,OAAO,CAACL,UAAU,CAAC;;IAEnC;IACAb,EAAE,CAACmB,IAAI,CAAC,sBAAsB,CAAC,CAACC,IAAI,CAAEC,SAAS,IAAK;MAClD,MAAMC,SAAS,GAAGrB,QAAQ,CAACsB,OAAO,CAACF,SAAS,EAAEA,SAAS,CAACG,OAAO,CAACF,SAAS,CAAC,CAACG,QAAQ;;MAEnF;MACA,MAAMC,UAAU,GAAG1B,EAAE,CAClB2B,eAAe,CAAC3B,EAAE,CAAC4B,iBAAiB,CAAC,CACrCC,MAAM,CAAC7B,EAAE,CAAC8B,MAAM,CAACzB,IAAI,EAAG0B,CAAC,IAAKA,CAAC,CAACC,cAAc,CAAC,CAAC;;MAEnD;MACAxB,GAAG,CAACyB,SAAS,CAAC,UAAU,CAAC,CACtB5B,IAAI,CAACiB,SAAS,CAAC,CACfY,IAAI,CAAC,MAAM,CAAC,CACZC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CACxBA,IAAI,CAAC,GAAG,EAAElB,IAAI,CAAC,CACfkB,IAAI,CAAC,MAAM,EAAGJ,CAAC,IAAK;QACnB,MAAMK,WAAW,GAAG/B,IAAI,CAACgC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,OAAO,KAAKR,CAAC,CAACS,UAAU,CAACC,IAAI,CAAC;QACrE,OAAOL,WAAW,GAAGV,UAAU,CAACU,WAAW,CAACJ,cAAc,CAAC,GAAG,MAAM;MACtE,CAAC,CAAC,CACDG,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC;;MAEzB;MACF;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;IACA,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC9B,IAAI,CAAC,CAAC;EAEV,oBAAOF,OAAA;IAAKuC,GAAG,EAAEnC,MAAO;IAACI,KAAK,EAAE,GAAI;IAACC,MAAM,EAAE;EAAI;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAC1D,CAAC;AAACxC,EAAA,CArDIF,QAAQ;AAAA2C,EAAA,GAAR3C,QAAQ;AAuDd,eAAeA,QAAQ;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}